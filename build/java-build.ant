<?xml version="1.0" encoding="UTF-8"?>
<project name="java-build" default="build">

  <property name="conf" value="dev" />
  <property file="build/${conf}.properties" />
  <property file="build/build.properties" />
  
  <!-- Source direcotries. -->
  <property name="src.main" value="${basedir}/src/main"/>
  <property name="src.test" value="${basedir}/src/test"/>
  <property name="src.main.java" value="${src.main}/java"/>
  <property name="src.main.resources" value="${src.main}/resources"/>
  <property name="src.test.java" value="${src.test}/java"/>
  <property name="src.test.resources" value="${src.test}/resources"/>

  <!-- Library direcotries. -->
  <property name="lib.home" value="${basedir}/libs"/>

  <!-- Output base direcotry.  -->
  <property name="output.home" value="${basedir}/build/output"/>
  <!-- Direcotry for reports.  -->
  <property name="output.reports" value="${output.home}/reports"/>
  <property name="output.reports.junit" value="${output.reports}/junit"/>
  <!-- Base direcotry for temporary data.  -->
  <property name="output.temp" value="${output.home}/temp"/>
  <property name="output.temp.classes" value="${output.temp}/classes"/>
  <property name="output.temp.jars" value="${output.temp}/jars"/>
  <property name="output.temp.ant" value="${output.temp}/ant"/>
  <!-- Artifacts place.  -->
  <property name="output.artifacts" value="${output.home}/artifacts"/>
  <!-- Directory containing build results.  -->
  <property name="build.home" value="${output.home}/build"/>
  <!-- Directory containing releases.  -->
  <property name="build.releases" value="${build.home}/releases"/>
  <!-- Directory containing main build result.  -->
  <property name="build.app" value="${build.home}/${ant.project.name}"/>

  <!-- =================== Compile options ==================== -->
  <property name="compile.debug" value="true" />
  <property name="compile.deprecation" value="false" />
  <property name="compile.optimize" value="true" />
	
	<property name="source.version" value="1.6" />
  <property name="target.version" value="1.6" />
  <!-- ======================================================== -->

  <path id="build.path">
    <fileset dir="${lib.home}">
      <include name="*.jar" />
    </fileset>
  </path>
  
  <path id="compile.classpath">
    <path refid="build.path" />
    <fileset dir="${lib.home}">
      <include name="apache-ant/1.8.0/ant-1.8.0.jar" />
      <include name="junit/4.8.2/junit-4.8.2.jar" />
    </fileset>
  </path>

  <!--
    target: Prepare Output
  -->
  <target name="-prepare-output">
    <echo message="Creating default output directories..."/>
    <mkdir dir="${output.temp}"/>
    <mkdir dir="${output.temp.ant}"/>
    <mkdir dir="${output.temp.classes}"/>
    <mkdir dir="${output.temp.jars}"/>
    <mkdir dir="${output.reports.junit}"/>
    <mkdir dir="${output.artifacts}"/>
    <mkdir dir="${build.app}"/>
    <mkdir dir="${build.releases}"/>
  </target>
  
  <!--
    target: Clean Output
  -->
  <target name="-clean-output">
    <echo message="Deleting default output directories..."/>
    <delete dir="${output.temp}"/>
    <delete dir="${build.app}"/>
    <delete dir="${output.reports}"/>
    <delete dir="${output.artifacts}"/>
  </target>

  <!--
    target: Compile Main
  -->
  <target name="-compile-main">
    <echo message="Compiling main sources..."/>
    <mkdir dir="${output.temp.classes}/main"/>
    <javac srcdir="${src.main.java}" 
           destdir="${output.temp.classes}/main" 
           debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}"
           source="${source.version}" target="${target.version}"
           encoding="UTF-8"
           includeantruntime="false"
           >
      <classpath refid="compile.classpath" />
    </javac>
  </target>

  <!--
    target: Pack Main
  -->
  <target name="-pack-main">
    <jar jarfile="${output.temp.jars}/${ant.project.name}-${release.version}.jar">
      <fileset dir="${output.temp.classes}/main" />
    </jar>
  </target>

  <!--
    target: Pack Sources
  -->
  <target name="-pack-sources">
    <jar jarfile="${output.temp.jars}/${ant.project.name}-${release.version}-sources.jar">
      <fileset dir="${src.main.java}" />
    </jar>
  </target>

  <!--
    goal: Clean
  -->
  <target name="clean" description="--> clean the project">
    <echo message="===== CLEAN ====="/>
    <antcall target="-clean-output"/>
  </target>

  <!--
    Target: Build.
  -->
  <target name="build" depends="-prepare-output, -compile-main, -pack-main, -pack-sources" 
          description="--> make the build directory">
    <echo message="Forming artifacts..."/>
    <copy todir="${output.artifacts}">
      <fileset dir="${output.temp.jars}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <copy todir="${output.artifacts}" flatten="true">
      <path refid="build.path" />
    </copy>
  </target>

  <target name="sources" depends="-prepare-output">
    <jar destfile="${output.artifacts}/${ant.project.name}-${release.version}-sources.jar">
      <fileset dir="${src.main.java}" />
    </jar>
  </target>
  
  <!--
    Target: Build.
  -->
  <target name="test" depends="build">
    <mkdir dir="${output.temp.classes}/test"/>
    <javac srcdir="${src.test.java}" 
           destdir="${output.temp.classes}/test" 
           debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}"
           source="${source.version}" target="${target.version}"
           encoding="UTF-8"
           includeantruntime="false"
           >
      <classpath>
        <fileset dir="${output.artifacts}" includes="*.jar" />
      </classpath>
    </javac>
    <copy todir="${output.temp.classes}/test">
      <fileset dir="${src.test.java}" includes="**/*.xml" />
    </copy>

    <echo message="Testing..."/>
    <junit haltonerror="true" haltonfailure="true" fork="true" showoutput="true" printsummary="true">
      <formatter type="xml"/>
      <classpath>
        <fileset dir="${output.artifacts}" includes="*.jar" />
        <pathelement location="${output.temp.classes}/test" />
      </classpath>
      <batchtest todir="${output.reports.junit}">
        <fileset dir="${output.temp.classes}/test">
          <exclude name="**/*Abstract*.class"/>
          <exclude name="**/*Runner*.class"/>
          <exclude name="**/*$*.class"/>
          <include name="**/*Test*.class"/>
        </fileset>
      </batchtest>
    </junit>
    <echo message="SUCCESS"/>
  </target>

  <target name="release" depends="test" description="Create release package">
    <mkdir dir="${build.app}/libs" />
    <copy todir="${build.app}/libs">
      <fileset dir="${output.artifacts}" excludes="junit*, ${ant.project.name}*" />
    </copy>
    <copy todir="${build.app}">
      <fileset dir="${output.artifacts}" includes="${ant.project.name}*" />
    </copy>
    <zip destfile="${build.releases}/${ant.project.name}-${release.version}-release.zip">
      <fileset dir="${build.app}" />
    </zip>
  </target>
  
</project>
