<?xml version="1.0" encoding="UTF-8"?>
<project name="" default="build" basedir=".." 
	  xmlns:stanfy="antlib:com.stanfy.anttasks" 
	  xmlns:contrib="antlib:net.sf.antcontrib"
	  xmlns:groovy="antlib:groovy">

  <!-- Home. -->
  <property name="build.home" value="${basedir}/build"/>

  <!-- Project properties. -->
  <loadproperties srcFile="${basedir}/project.properties" />

  <!-- Main properties. -->
  <property environment="env"/>
  <property name="conf" value="dev" />
  <condition property="realConf" value="${libs.conf}" else="${conf}">
    <and>
      <isset property="libs.conf"/>
      <equals arg1="${android.library}" arg2="true" />
    </and>
  </condition>
  <loadproperties srcFile="${build.home}/${realConf}.properties" />
  <loadproperties srcFile="${build.home}/build.properties" />
  <condition property="libs.conf" value="${realConf}">
    <not><isset property="libs.conf" /></not>
  </condition>
  <echo message="Configuration: conf=${conf}, real=${realConf}, libs=${libs.conf}" />
	<property name="conf.lang.default" value="" />
	<condition property="conf.lang.performTransform">
    <not><equals arg1="${conf.lang.default}" arg2="" /></not>
  </condition>
  <condition property="conf.lang.performTransform.value" value="true" else="false">
  	<isset property="conf.lang.performTransform"/>
  </condition>
  <condition property="conf.lang.moveLibDefault" value="true" else="false">
    <isset property="conf.lang.libDefaultMapping"/>
  </condition>
  <echo message="Default language will be changed: ${conf.lang.performTransform.value} (${conf.lang.default})" />
  <condition property="conf.lang.indicateDefaultFlag" value="true" else="false">
  	<and>
      <isset property="conf.lang.performTransform"/>
  		<equals arg1="${conf.lang.indicateDefault}" arg2="true" />
    </and>
  </condition>
  <echo message="Default string resources will be copied to: ${conf.lang.default}" />

  <!-- Check for sdk.dir -->
  <fail
      message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
      unless="sdk.dir"
      />

	<!-- Proguard configuration -->
	<property name="proguard.config.sdk" value="${sdk.dir}/tools/proguard/proguard-android.txt" />
	<condition property="proguard.config.main" value="${build.library.path}/build/proguard-lib.cfg" else="${build.home}/proguard-lib.cfg">
    <isset property="build.library.path" />
  </condition>
  <condition property="proguard.config" value="${proguard.config.sdk}:${proguard.config.main}:${proguard.config.project}">
  	<and>
      <isset property="proguard.config.project" />
  		<equals arg1="${proguard.config.enabled}" arg2="true" />
    </and>
  </condition>
  <condition property="proguard.config" value="${proguard.config.main}">
    <equals arg1="${proguard.config.enabled}" arg2="true" />
  </condition>
  <condition property="proguard.config.message" value="Proguard config: ${proguard.config}" else="Proguard config is not defined">
  	<isset property="proguard.config" />
  </condition>
	<echo>${proguard.config.message}</echo>
	
  <!-- Keystore -->
  <property name="keystore.path" value="${env.ANDROID_KEYSTORE}" />
  <property name="key.store" value="${keystore.path}/${keystore.name}.keystore" />
  <property file="${keystore.path}/${keystore.name}-access.properties" />

	<!-- Default SDK location -->
  <property name="sdk.dir" value="${env.ANDROID_HOME}" />
  <property name="sdk.dir" value="${env.ANDROID_SDK}" />
	
  <!-- ============================= -->
  <!--          Setup paths          -->
  <!-- ============================= -->
  <property name="src.java" value="${basedir}/src"/>
  <property name="src.libs" value="${basedir}/libs"/>
  <property name="src.test" value="${basedir}/test"/>
  <property name="src.test.java" value="${src.test}/java"/>
  <property name="src.test.groovy" value="${src.test}/groovy"/>
  <property name="src.resources" value="${basedir}/res"/>
  <property name="src.assets" value="${basedir}/assets"/>

  <property name="output.temp.relative" value="build/output/temp"/>
  <property name="output.publish.name.prefix" value="" />

  <property name="output.home" value="${build.home}/output"/>
  <property name="output.temp" value="${output.home}/temp"/>
  <property name="output.temp.resources" value="${output.temp}/res"/>
  <property name="output.temp.android" value="${output.temp}/android"/>
  <property name="output.temp.src" value="${output.temp}/src"/>
  <property name="output.temp.libs" value="${output.temp}/libs"/>
  <property name="output.temp.assets" value="${output.temp}/assets"/>
  <property name="output.temp.test" value="${output.temp}/test-classes"/>
  <property name="output.release" value="${output.home}/release" />
  <property name="release.path" value="${customer.name}/android${output.publish.name.prefix}" />
  <property name="output.release.app" value="${output.release}/${release.path}" />
  <property name="output.reports" value="${output.home}/reports"/>
  <property name="output.junit" value="${output.reports}/junit"/>
  <property name="output.proguard.mapping" value="${output.temp.android}/proguard/mapping.txt"/>

  <condition property="lib.ant" value="${build.library.path}/build/tools" else="${build.home}/tools">
    <isset property="build.library.path" />
  </condition>
  
  <!-- Override resources dir to have a filter possibility, assets are not overriden. -->
  <property name="resource.dir" value="${output.temp.relative}/res" />
  <property name="resource.absolute.dir" value="${basedir}/${resource.dir}" />
  <property name="source.dir" value="${output.temp.relative}/src" />
  <property name="out.dir" value="${output.temp.relative}/android" />
  <property name="asset.absolute.dir" value="${output.temp.assets}"/>
  <property name="jar.libs.absolute.dir" value="${output.temp.libs}" />
  <!-- ============================= -->

  <!-- Files with flags. -->
  <property name="files.flags" value="**/Defaults.java, **/ErrorCodes.java, **/DebugFlags.java, **/Constants.java" />

  <!-- Whether it's required to perform  -->
  <condition property="codecheck.necessary">
    <equals arg1="${codecheck.perform}" arg2="true" />
  </condition>
  
  <!-- Properties -> filter. -->
  <filterset id="filter.main" begintoken="{@" endtoken="}">
    <filtersfile file="project.properties" />
    <filtersfile file="${build.home}/build.properties" />
    <filtersfile file="${build.home}/${realConf}.properties" />
  </filterset>
  
  <!-- Additional tasks: xml, stanfy, antcontrib. -->
  <path id="antlibs.ext">
    <fileset dir="${lib.ant}" includes="*.jar" />
  </path>
  <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpathref="antlibs.ext" />
  <taskdef uri="antlib:com.stanfy.anttasks" resource="com/stanfy/anttasks/antlib.xml" classpathref="antlibs.ext" />
  <taskdef uri="antlib:net.sf.antcontrib" resource="net/sf/antcontrib/antlib.xml" classpathref="antlibs.ext" />

	<!-- Resolve application package -->
  <xmltask source="AndroidManifest.xml">
    <copy path="/manifest/@package" property="application.package" />
  </xmltask>
  
  <!-- Import android build rules, it's a bit tricky. -->
  <xmltask source="${sdk.dir}/tools/ant/build.xml" dest="${build.home}/android_rules.xml">
    <insert path="/project/target[@name='-build-setup']/if/then/subant[@buildpathref='project.libraries']">
      <![CDATA[
    	<property name="libs.conf" value="${libs.conf}"/>
      <property name="conf.lang.default" value="${conf.lang.default}" />
    	]]>
    </insert>
  </xmltask>
  <!-- version-tag: custom -->
  <import file="${build.home}/android_rules.xml" />
  
  <!-- *************** Macros *************** -->
  
  <!--
    macro: SVN Info
    Generates the svn-info.xml file containing the information about the file as the svn entry.
  -->
  <macrodef name="svninfo">
    <attribute name="file"/>
    <sequential>
      <property file="${repo.access.file}" />
      <echo message="Generating SVN info... ${svn.user}"/>
      <exec executable="svn" output="${output.temp}/svn-info.xml" failonerror="true">
        <arg line="info @{file} --xml --username ${svn.user} --password ${svn.password}"/>
      </exec>
    </sequential>
  </macrodef>

  <!--
    macro: revision
    Obtains the last revision of the project. Saves it to the property with the specified name.
  -->
  <macrodef name="revision">
    <attribute name="property"/>
    <sequential>
      <svninfo file="${svn.url}"/>
      <xmltask source="${output.temp}/svn-info.xml">
        <cut path="/info/entry/@revision" attrValue="true" property="@{property}"/>
      </xmltask>
    </sequential>
  </macrodef>
  
  <!-- *************** Internal targets *************** -->
  
  <!-- Hooks -->
  <target name="-package-resources" depends="-preprocess, android_rules.-package-resources" />
  <target name="-pre-build" depends="-prepare-directories, -prepare-sources, -prepare-lang-values"/>
  <target name="-post-compile" depends="-copy-jar-to-bin, -test" />
  
  <target name="-prepare-directories">
    <mkdir dir="${output.temp.resources}"/>
    <mkdir dir="${output.temp.src}"/>
    <mkdir dir="${output.temp.libs}"/>
    <mkdir dir="${output.temp.assets}"/>
    <mkdir dir="${output.temp.android}"/>
    <mkdir dir="${output.temp.test}"/>
    <mkdir dir="${output.reports}"/>
    <mkdir dir="${output.junit}"/>
    
    <copy todir="${output.temp.src}" overwrite="true">
      <fileset dir="${src.java}" />
    </copy>
    <copy todir="${output.temp.libs}" overwrite="true">
      <fileset dir="${src.libs}" />
    </copy>
    <copy todir="${output.temp.resources}" overwrite="true">
      <fileset dir="${src.resources}" />
    </copy>
    <copy todir="${output.temp.assets}" overwrite="true">
      <fileset dir="${src.assets}" />
    </copy>
  </target>

  <target name="-prepare-sources">
    <echo message="Prepare project constants, flags..."/>
    <copy todir="${output.temp.src}" overwrite="true">
      <fileset dir="${src.java}" includes="${files.flags}" />
      <filterset refid="filter.main"/>
    </copy>
    <stanfy:setflags>
      <fileset dir="${output.temp.src}" includes="${files.flags}" />
    </stanfy:setflags>
  </target>
  
	<target name="-prepare-lang-values" if="conf.lang.performTransform">
		<do-only-if-not-library elseText="Library project. Do nothing.">
	    <if condition="${conf.lang.moveLibDefault}">
	      <then><mkdir dir="${resource.absolute.dir}/values-${conf.lang.libDefaultMapping}" /></then>
	    </if>
      <stanfy:resolvelib propertiesPrefix="lib.stviews" namePart="${application.library}" />
      <if condition="${conf.lang.moveLibDefault}">
        <then>
          <copy todir="${resource.absolute.dir}/values-${conf.lang.libDefaultMapping}">
            <fileset dir="${lib.stviews.path}/res/values" includes="string*.xml" />
            <mapper type="regexp" from="string(.*)\.xml$$" to="string\1_from_lib.xml"/>
          </copy>
        </then>
      </if>
      <copy todir="${resource.absolute.dir}/values" overwrite="true" failonerror="false">
        <fileset dir="${lib.stviews.path}/res/values-${conf.lang.default}" includes="*.xml" />
        <mapper type="regexp" from="(.*)\.xml$$" to="\1_from_lib_default_${conf.lang.default}.xml"/>
      </copy>
			
      <if condition="${conf.lang.indicateDefaultFlag}">
        <then>
        	<echo>Force default language to be indicated</echo>
        	<mkdir dir="${resource.absolute.dir}/values-${conf.lang.default}" />
          <copy todir="${resource.absolute.dir}/values-${conf.lang.default}">
            <fileset dir="${resource.absolute.dir}/values" includes="string*.xml" />
            <mapper type="regexp" from="(.*)\.xml$$" to="\1_from_default_strings.xml"/>
          </copy>
        </then>
      </if>
			
		</do-only-if-not-library>
	</target>
	
  <!-- Before packaging resources... -->
  <target name="-preprocess" depends="-prepare-release, -prepare-map-key" />
  <target name="-pre-clean" depends="-prepare-release" />

  <target name="-prepare-release" if="make.release">
    <echo>Removing debug attribute from AndroidManifest.xml</echo>
    <replaceregexp file="AndroidManifest.xml" match="android:debuggable=&quot;.*?&quot;" replace="" />
  </target>
  
  <target name="-prepare-map-key" if="google.map.key">
    <echo>Set appropriate map key</echo>
    <!-- Pattern: (<string\s+name="map_key"\s*>).+?(</string>) -->
    <replaceregexp file="${resource.dir}/values/settings.xml" 
        match="(&lt;string\s+name=&quot;map_key&quot;\s*&gt;).+?(&lt;/string&gt;)" 
        replace="\1${google.map.key}\2" 
        />
  </target>

   
  <!-- Send Release Mail -->
  <target name="-send-release-mail" if="release.mail.list">
    <echo message="Send mail to ${release.mail.list}"/>
    <mail mailhost="${smtp.host}" subject="${release.name}." tolist="${release.mail.list}">
      <from address="build@stanfy.com.ua"/>
      <replyto address="${smtp.reply}"/>
      <message>
        Release name: ${release.name}. Version: ${publish.version}.
        Download link: ${http.base}/${release.path}/${publish.name}
      </message>
      <!--
      <attachments>
        <fileset dir="${output.release.app}" includes="${publish.name}"/>
      </attachments>  
      -->
    </mail>
  </target>

	<target name="-publish-client" if="publish.client">
	  <property name="customer.path" value="${scp.customer.dir}/${customer.name}/releases/android"/>
	  <echo>Deploy to customer directory ${customer.path}...</echo>
	  <scp todir="${scp.user}@${scp.host}:${customer.path}" password="${scp.password}" port="${scp.port}">
	    <fileset dir="${output.release}/${release.path}" />
	  </scp>
	</target>

  <target name="-publish-dev" if="publish.dev">
    <echo message="Sending release to the repository....."/>
    <scp todir="${scp.user}@${scp.host}:${scp.release.dir}" password="${scp.password}" port="${scp.port}">
      <fileset dir="${output.release}" includes="${release.path}/**"/>
    </scp>
  </target>
	
  <target name="-copy-jar-to-bin">
    <fileset id="lib.jar.path" dir="${output.temp.android}" includes="classes.jar" />
    <copy todir="bin"><fileset refid="lib.jar.path"/></copy>
  </target>
  <target name="-copy-jar-to-release" if="android.library">
    <fileset id="lib.jar.path" dir="${output.temp.android}" includes="classes.jar" />
    <copy todir="${output.release}"><fileset refid="lib.jar.path"/></copy>
  </target>
  
  <target name="-grab-proguard-mapping" if="proguard.config">
    <copy tofile="${output.release}/${ant.project.name}-mapping.txt" file="${output.proguard.mapping}" failonerror="false" />
  </target>

  <target name="-clean-libs" unless="android.library">
    <stanfy:resolvelib propertiesPrefix="lib.stviews" namePart="${application.library}" />
    <ant antfile="${lib.stviews.path}/build.xml" inheritall="false" dir="${lib.stviews.path}" target="clean">
      <property name="libs.conf" value="${libs.conf}"/>
    </ant>
  </target>
  
  <target name="-check-tests-available">
	  <available file="${src.test}" property="src.test.available" />
  </target>

  <target name="-test" depends="-check-tests-available" if="src.test.available">
    <path id="test.classpath">
      <fileset dir="${jar.libs.absolute.dir}" includes="test/*.jar" />
      <fileset dir="${jar.libs.absolute.dir}" includes="*.jar" />
    	<fileset dir="${build.library.path}/libs/test" includes="*.jar" />
      <pathelement path="${output.temp.android}/classes" />
    	<path refid="project.libraries.jars" />
      <path refid="android.target.classpath" />
    </path>
      
    <echo message="Compiling tests..."/>
    <javac target="1.5" debug="true" extdirs="" destdir="${output.temp.test}" srcdir="${src.test.java}"
        includeantruntime="false"
        verbose="${verbose}" 
        classpathref="test.classpath"
        />
    
    <path id="test.classpath.groovy">
      <path refid="test.classpath" />
    	<pathelement path="${output.temp.test}" />
    </path>
  	
    <taskdef resource="org/codehaus/groovy/antlib.xml" uri="antlib:groovy" classpathref="test.classpath" />
  	<groovy:groovyc 
  		  srcdir="${src.test.groovy}"
  		  destdir="${output.temp.test}"
  		  classpathref="test.classpath.groovy"
  	    />
  		
    <echo message="Testing..."/>
    <junit haltonerror="true" haltonfailure="true" fork="true" showoutput="true" printsummary="true">
      <formatter type="xml"/>
      <classpath>
        <path refid="test.classpath.groovy"/>
        <pathelement location="${output.temp.test}" />
      </classpath>
      <batchtest todir="${output.junit}">
        <fileset dir="${output.temp.test}">
          <exclude name="**/*Abstract*.class"/>
          <exclude name="**/*Runner*.class"/>
          <exclude name="**/*$*.class"/>
          <exclude name="**/activity/**"/>
          <include name="**/*Test*.class"/>
        </fileset>
      </batchtest>
    </junit>
    <echo message="SUCCESS"/>
  </target>

  <!-- *************** Public targets *************** -->

  <!--
    Clean all the genrated directories.
  -->
  <target name="clean" description="Clean output directories" depends="android_rules.clean, -clean-libs">
    <delete dir="${output.temp}"/>
    <delete dir="${output.release}"/>
    <delete dir="${output.junit}"/>
    <delete dir="bin" failonerror="false" />
  </target>
 
  <!--
    Main target. It performs compilation and packaging in the defined mode (configuration).
  -->
  <target name="build" depends="release" description="--> make a ready for installation package">
    <mkdir dir="${output.release}" />
    <copy todir="${output.release}">
      <fileset dir="${output.temp.android}" includes="*release*, *debug*" />
    </copy>
    <antcall target="-copy-jar-to-release" />
    <antcall target="-grab-proguard-mapping" />
  </target>

  <!--
    Perfom code style checks and copy-past detection.
  -->
  <target name="codecheck" depends="build" description="Check the code using PMD" if="codecheck.necessary">
    <path id="pmd.path">
      <fileset dir="${lib.ant}/pmd" includes="*.jar" />
    </path>
    <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="pmd.path" />
    <fileset id="pmd.src" dir="${src.java}">
      <include name="**/*.java"/>
    </fileset>
    
    <echo>Running lint...</echo>
    <condition property="lint.config" value="${basedir}/lint.xml" else="${build.library.path}/lint.xml">
      <available file="${basedir}/lint.xml" />
    </condition>
  	<exec executable="${sdk.dir}/tools/lint">
  		<arg value="--quiet" />
      <arg value="--html" />
      <arg value="${output.reports}/lint-report.html" />
      <arg value="${basedir}" />
      <arg value="--config" />
      <arg value="${lint.config}" />
  	</exec>
    
    <echo>Running copy-past detector...</echo>
    <cpd language="java" minimumtokencount="70" encoding="UTF-8" format="xml" outputfile="${output.reports}/cpd-report.xml">
      <fileset refid="pmd.src" />
    </cpd>
    
    <echo>Blaming...</echo>
    <property file="${repo.access.file}" />
    <echo file="${output.temp}/awk">
      <![CDATA[
      BEGIN { maxrev = 0 }
      (NR >= @{line}) && (NR < @{line} + @{size}) {
        if (maxrev < $1) { maxrev = $1; lastcommiter = $2 }
        freq[$2]++
      }
      END {
        printf "blame.last=%s\n", lastcommiter
        printf "blame.last.rev=%d\n", maxrev
        maxCount = 0
        for (man in freq) {
          count = freq[man]
          if (maxCount < count) { most = man; maxCount = count }
        }
        printf "blame.most=%s\n", most
      }
      ]]>
    </echo>
    <copy file="${output.reports}/cpd-report.xml" tofile="${output.reports}/cpd-report-blame.xml" overwrite="true" />
    
    <xmltask source="${output.reports}/cpd-report.xml">
      <call path="//duplication/file" buffer="duplicationFile">
        <param name="line" path="@line" />
        <param name="path" path="@path" />
        <param name="size" path="../@lines" />
        <actions>
          <contrib:var name="blame.allowed" value="true" />
          <contrib:if>
            <isset property="codecheck.exclude" />
            <then>
              <contrib:for list="${codecheck.exclude}" delimiter="," param="pattern">
                <sequential>
                  <contrib:if>
                    <matches string="@{path}" pattern="@{pattern}" />
                    <then>
                      <contrib:var name="blame.allowed" value="false" />
                    </then>
                  </contrib:if>
                </sequential>
              </contrib:for>
            </then>
          </contrib:if>
          
          <contrib:var name="blame.xmlpath" value="/pmd-cpd/duplication[@lines=@{size}]/file[@line=@{line} and @path='@{path}']" />
          <contrib:if>
            <equals arg1="${blame.allowed}" arg2="true"/>
            <then>
              <echo level="debug">Blame line @{line} in @{path}</echo>
              <exec executable="svn" output="${output.temp}/blame">
                <arg value="blame"/>
                <arg value="@{path}"/>
                <arg value="--username"/>
                <arg value="${svn.user}"/>
                <arg value="--password"/>
                <arg value="${svn.password}"/>
              </exec>
              <copy file="${output.temp}/awk" tofile="${output.temp}/awk-prepared" overwrite="true">
                <filterset begintoken="@{" endtoken="}">
                  <filter token="line" value="@{line}"/>
                  <filter token="size" value="@{size}"/>
                </filterset>
              </copy>
              <exec executable="awk" output="${output.temp}/blame-results">
                <arg value="-f"/>
                <arg value="${output.temp}/awk-prepared"/>
                <arg value="${output.temp}/blame"/>
              </exec>
              <contrib:var file="${output.temp}/blame-results" />
              <echo level="debug" message="${blame.xmlpath}"/>
              <xmltask source="${output.reports}/cpd-report-blame.xml" dest="${output.reports}/cpd-report-blame.xml">
                <attr path="${blame.xmlpath}" attr="committerLast" value="${blame.last}"/>
                <attr path="${blame.xmlpath}" attr="committerMost" value="${blame.most}"/>
              </xmltask>
            </then>
            <else>
              <xmltask source="${output.reports}/cpd-report-blame.xml" dest="${output.reports}/cpd-report-blame.xml">
                <remove path="${blame.xmlpath}" />
              </xmltask>
            </else>
          </contrib:if>
        </actions>
      </call>
    </xmltask>
    <xmltask source="${output.reports}/cpd-report-blame.xml" dest="${output.reports}/cpd-report-blame.xml">
      <remove path="/pmd-cpd/duplication[not(file)]" />
    </xmltask>
    
    <xslt in="${output.reports}/cpd-report-blame.xml" style="${lib.ant}/pmd/cpdhtml.xslt" out="${output.reports}/cpd-report.html" />
    
  </target>

	<target name="publish" depends="build, codecheck" description="--> publish the built application">
    <tstamp>
      <format property="publish.date" pattern="yyyyMMdd-HHmmss" />
    </tstamp>
    <xmltask source="AndroidManifest.xml">
      <cut path="/manifest/@android:versionName" property="publish.version" />
    </xmltask>
    <revision property="revision.number"/>
    <!--property name="publish.name" value="${ant.project.name}_trunk_${publish.version}_manual_${publish.date}_r${revision.number}${output.publish.name.prefix}.apk" /-->

    <condition property="tag.name" value="${TAG_NAME}" else="trunk">
      <isset property="TAG_NAME" />
    </condition>
    <condition property="init.type" value="auto" else="manual">
      <!--isset property="INIT_TYPE" /-->
      <and>
        <isset property="env.JOB_NAME" />
        <contains string="${env.JOB_NAME}" substring="-auto" />
      </and>
    </condition>
    <condition property="build.number" value="${env.BUILD_NUMBER}" else="0">
      <isset property="env.BUILD_NUMBER" />
    </condition>
    
    <property name="publish.name" value="${ant.project.name}_${tag.name}_${publish.version}_${init.type}_${publish.date}_r${revision.number}b${build.number}.apk" />
    <property name="publish.name.mapping" value="${publish.name}-mapping.txt" />

    <echo message="Create APK ${publish.name}..." />
    <mkdir dir="${output.release.app}"/>
    <copy file="${output.release}/${ant.project.name}-release.apk" tofile="${output.release.app}/${publish.name}" />
    <copy file="${output.release}/${ant.project.name}-mapping.txt" tofile="${output.release.app}/${publish.name.mapping}" failonerror="false" />
    
    <property file="${repo.access.file}" />

    <condition property="publish.dev">
      <or>
        <not><isset property="env.BuildDev" /></not>
        <equals arg1="${env.BuildDev}" arg2="true"/>
      </or>
    </condition>
    <antcall target="-publish-dev"/>

    <condition property="publish.client">
      <or>
        <equals arg1="${customer.sync}" arg2="true"/>
        <equals arg1="${env.BuildClient}" arg2="true"/>
      </or>
    </condition>
    <antcall target="-publish-client"/>

  </target>
	
  <target name="export" description="--> export application sources">
    <do-only-if-not-library elseText="export target should be called for main project">
      <delete dir="${output.release}/export" failonerror="false"/>
      <stanfy:resolvelib propertiesPrefix="lib.stviews" namePart="${application.library}" />
      <!-- Build the library --> 
      <ant antfile="${lib.stviews.path}/build.xml" inheritall="false" dir="${lib.stviews.path}" target="clean" />
      <ant antfile="${lib.stviews.path}/build.xml" inheritall="false" dir="${lib.stviews.path}" target="build" />
      <echo message="Library is built"/>

      <!-- Prepare directories -->
      <mkdir dir="${output.release}/export/${ant.project.name}" />
      <mkdir dir="${output.release}/export/${application.library}" />

      <!-- Copy main sources, library resources -->
      <property name="export.exclude" value="build/**,gen/**,bin/**,libs-ext/**,*check*style*,build.xml"/>
      <copy todir="${output.release}/export/${ant.project.name}" overwrite="true">
        <fileset dir="${basedir}" excludes="${export.exclude}" />
      </copy>
      <copy todir="${output.release}/export/${application.library}" overwrite="true">
        <fileset dir="${lib.stviews.path}" excludes="${export.exclude},src/**" />
      </copy>
      <mkdir dir="${output.release}/export/${application.library}/libs" />
      <copy tofile="${output.release}/export/${application.library}/libs/${application.library}.jar" overwrite="true" 
            file="${lib.stviews.path}/bin/classes.jar" />

      <!-- Fix project.properties in the project -->
      <echo>${lib.stviews.name}</echo>
      <replaceregexp 
        file="${output.release}/export/${ant.project.name}/project.properties"
        match="android\.library\.reference\.(\d+)=.+${lib.stviews.name}.*"
        replace="android.library.reference.\1=../${application.library}"
        byline="true"
        />

      <!-- Fix eclipse projects -->
      <property name="export.libproject" value="${output.release}/export/${application.library}/.project"/>
      <property name="export.mainclasspath" value="${output.release}/export/${ant.project.name}/.classpath"/>
      <property name="export.mainproject" value="${output.release}/export/${ant.project.name}/.project"/>
      <xmltask source="${export.libproject}" dest="${export.libproject}">
        <replace path="/projectDescription/name/text()" withText="${application.library}" />
      </xmltask>
      <xmltask source="${export.mainclasspath}" dest="${export.mainclasspath}">
        <attr path="/classpath/classpathentry" attr="sourcepath" remove="true" />
        <insert path="/classpath">
        <![CDATA[<classpathentry kind="lib" path="/${application.library}/libs/${application.library}.jar" />]]>
        </insert>
      </xmltask>
      <replaceregexp 
        file="${export.mainclasspath}"
        match="${lib.stviews.name}"
        replace="${application.library}"
        byline="true"
        />
      <zip destfile="${output.release}/${ant.project.name}-export.zip">
        <fileset dir="${output.release}/export" />
      </zip>
    </do-only-if-not-library>
  </target>

	<target name="build-jenkins" depends="clean">
    <antcall target="publish">
      <param name="customer.sync" value="${BuildClient}"/>
    </antcall>
  </target>
	
	<target name="help" description="--> help info">
    <echo>
      Android build for Stanfy.
    </echo>
  </target>
  
</project>
